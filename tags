!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Action	actor.py	/^class Action:$/;"	c
Actor	actor.py	/^def Actor(id, name):$/;"	f
AddStat	stats.py	/^  def AddStat(self, stat):$/;"	m	class:StatSheet
AddTask	graphics.py	/^  def AddTask(self, pos, z, surface_id, rgb_add=None):$/;"	m	class:Frame
BACKGROUND_COLOR	graphics.py	/^BACKGROUND_COLOR = [0,0,0]$/;"	v
Blit	graphics.py	/^def Blit(surface, dest, pos, **kwargs):$/;"	f
BlitText	graphics.py	/^def BlitText(surface_reg, dest, text):$/;"	f
BreadthFirstExpand	main.py	/^def BreadthFirstExpand(game, start, max_steps):$/;"	f
COMPILER	makefile	/^COMPILER = g++$/;"	m
Consume	stats.py	/^  def Consume(self, acc=None):$/;"	m	class:FractionStat
Copy	stats.py	/^  def Copy(self): return copy.deepcopy(self)$/;"	m	class:Stat
Copy	stats.py	/^  def Copy(self):$/;"	m	class:FractionStat
DEFAULT_SPD	turn.py	/^DEFAULT_SPD = 10$/;"	v
Damage	damage.py	/^class Damage:$/;"	c
DamageVector	damage.py	/^class DamageVector:$/;"	c
DealDamage	damage.py	/^  def DealDamage(self, defender):$/;"	m	class:DamageVector
DealDamage	damage.py	/^def DealDamage(actor, amount):$/;"	f
DefinitelyAnError	actor.py	/^    class DefinitelyAnError: pass$/;"	c	function:Entity.Get
Dimensions	graphics.py	/^  def Dimensions(self):$/;"	m	class:Frame
Distance	vec.py	/^def Distance(a, b):$/;"	f
DistanceSquared	vec.py	/^def DistanceSquared(a, b):$/;"	f
EffectRepr	stats.py	/^  def EffectRepr(self): pass$/;"	m	class:Stat
EffectRepr	stats.py	/^  def EffectRepr(self): return f'{self.n}\/{self.d}'$/;"	m	class:FractionStat
EffectRepr	stats.py	/^  def EffectRepr(self):$/;"	m	class:IntegerStat
Entity	actor.py	/^class Entity:$/;"	c
EntityAt	main.py	/^  def EntityAt(self, pos):$/;"	m	class:Game
ExpandGetItem	main.py	/^def ExpandGetItem(game, pos, a, move_action, visited):$/;"	f
ExpandMeleeAtk	main.py	/^def ExpandMeleeAtk(game, pos, a, sheet, move_action, visited):$/;"	f
FractionAdd	item_compendium.py	/^def FractionAdd(stat_name, amount, reason=None):$/;"	f
FractionStat	stats.py	/^class FractionStat(Stat):$/;"	c
Frame	graphics.py	/^class Frame:$/;"	c
Game	main.py	/^class Game:$/;"	c
GenerateActions	main.py	/^def GenerateActions(game, a):$/;"	f
Get	actor.py	/^  def Get(self, key):$/;"	m	class:Entity
Get	main.py	/^  def Get(self, xy, y=None):$/;"	m	class:TileGrid
GetAction	main.py	/^class GetAction(actor.Action):$/;"	c
GetChar	graphics.py	/^  def GetChar(self, c):$/;"	m	class:SurfaceRegistry
GetOr	actor.py	/^  def GetOr(self, key, default=None):$/;"	m	class:Entity
GraphicalPos	graphics.py	/^def GraphicalPos(camera_offset, grid_pos):$/;"	f
GridBlit	graphics.py	/^def GridBlit(surface, dest, camera_offset, grid_pos, **kwargs):$/;"	f
GridPos	graphics.py	/^def GridPos(camera_offset, graphical_pos):$/;"	f
HasAction	stats.py	/^  def HasAction(self, action_id): return action_id in self.actions$/;"	m	class:Stat
HasTile	main.py	/^  def HasTile(self, xy, y=None):$/;"	m	class:TileGrid
Hp	actor.py	/^def Hp(have, total, reason=None):$/;"	f
IntAdd	item_compendium.py	/^def IntAdd(stat_name, value, reason=None):$/;"	f
IntMult	item_compendium.py	/^def IntMult(stat_name, value, reason=None):$/;"	f
IntegerStat	stats.py	/^class IntegerStat(Stat):$/;"	c
Item	item_compendium.py	/^def Item(name, image, description, item_stats):$/;"	f
Iterate	main.py	/^  def Iterate(self):$/;"	m	class:TileGrid
KillPending	main.py	/^  def KillPending(self):$/;"	m	class:Game
LOOK_DESCRIPTION_START	main.py	/^LOOK_DESCRIPTION_START = (600, 100)$/;"	v
Lerp	vec.py	/^def Lerp(a, b, r):$/;"	f
MARKER_SURFACE	main.py	/^  MARKER_SURFACE = None$/;"	v	class:GetAction
MARKER_SURFACE	main.py	/^  MARKER_SURFACE = None$/;"	v	class:MeleAction
MARKER_SURFACE	main.py	/^  MARKER_SURFACE = None$/;"	v	class:MoveAction
MagnitudeSquared	vec.py	/^  def MagnitudeSquared(self):$/;"	m	class:Vec2d
Marker	actor.py	/^class Marker:$/;"	c
Markers	actor.py	/^  def Markers(self): return []$/;"	m	class:Action
Markers	main.py	/^  def Markers(self): $/;"	m	class:MeleAction
Markers	main.py	/^  def Markers(self):$/;"	m	class:GetAction
Markers	main.py	/^  def Markers(self):$/;"	m	class:MoveAction
MeleAction	main.py	/^class MeleAction(actor.Action):$/;"	c
Merge	stats.py	/^  def Merge(self, other): pass$/;"	m	class:Stat
Merge	stats.py	/^  def Merge(self, other):$/;"	m	class:FractionStat
Merge	stats.py	/^  def Merge(self, other):$/;"	m	class:IntegerStat
Merge	stats.py	/^  def Merge(self, other_sheet):$/;"	m	class:StatSheet
MoveAction	main.py	/^class MoveAction(actor.Action):$/;"	c
NOT_AN_ID	actor.py	/^NOT_AN_ID = -1$/;"	v
Newline	graphics.py	/^  def Newline(x, y):$/;"	f	function:BlitText
NewlineIfNeeded	graphics.py	/^  def NewlineIfNeeded(surface_len, x=x, y=y):$/;"	f	function:BlitText
NextTurn	turn.py	/^def NextTurn(actors):$/;"	f
OPS	makefile	/^OPS = -Wall -std=c++2a$/;"	m
OnAction	actor.py	/^def OnAction(e, action, *args, **kwargs):$/;"	f
OnAction	stats.py	/^  def OnAction(self, action_id, *args, **kwargs):$/;"	m	class:Stat
OrthogonalPositions	main.py	/^def OrthogonalPositions(pos):$/;"	f
Over	turn.py	/^  def Over(self):$/;"	m	class:Turn
PickUp	actor.py	/^  def PickUp(self, entity):$/;"	m	class:Entity
Pop	priority_queue.py	/^  def Pop(self):$/;"	m	class:PriorityQueue
Pos	main.py	/^  def Pos(self): return self.item.pos$/;"	m	class:GetAction
Pos	main.py	/^  def Pos(self): return self.target.pos$/;"	m	class:MeleAction
Pos	main.py	/^  def Pos(self): return self.to_pos$/;"	m	class:MoveAction
PriorityQueue	priority_queue.py	/^class PriorityQueue:$/;"	c
Push	priority_queue.py	/^  def Push(self, value, weight):$/;"	m	class:PriorityQueue
Refund	stats.py	/^  def Refund(self, acc=None):$/;"	m	class:FractionStat
RegisterMarkerSurface	main.py	/^def RegisterMarkerSurface(surface_reg, rgba_color):$/;"	f
RegisterSurface	graphics.py	/^  def RegisterSurface(self, surface):$/;"	m	class:SurfaceRegistry
RegisterTextFromFont	graphics.py	/^  def RegisterTextFromFont(self, text, font=None, color=WHITE,$/;"	m	class:SurfaceRegistry
RegisterTileType	main.py	/^  def RegisterTileType(self, handle, type):$/;"	m	class:TileGrid
Render	graphics.py	/^  def Render(self):$/;"	m	class:Frame
RenderTask	graphics.py	/^class RenderTask:$/;"	c
ResolveAmount	damage.py	/^  def ResolveAmount(self, stat_sheet):$/;"	m	class:Damage
Run	actor.py	/^  def Run(self, game, actor): pass$/;"	m	class:Action
Run	main.py	/^  def Run(self, game, a): a.pos = self.to_pos$/;"	m	class:MoveAction
Run	main.py	/^  def Run(self, game, a):$/;"	m	class:GetAction
Run	main.py	/^  def Run(self, game, actor):$/;"	m	class:MeleAction
SCREEN_HEIGHT	main.py	/^SCREEN_HEIGHT = graphics.TILE_SIZE * 45$/;"	v
SCREEN_WIDTH	main.py	/^SCREEN_WIDTH = graphics.TILE_SIZE * 52$/;"	v
SPACE_LEN	graphics.py	/^SPACE_LEN = SPACING * 2$/;"	v
SPACING	graphics.py	/^SPACING = 1$/;"	v
Set	actor.py	/^  def Set(self, key, data):$/;"	m	class:Entity
Set	main.py	/^  def Set(self, x, y, tile_type):$/;"	m	class:TileGrid
SpawnItem	main.py	/^def SpawnItem(entity_template, id, position):$/;"	f
Stat	stats.h	/^  Stat(std::string name="", std::string reason="")$/;"	f	class:Stat
Stat	stats.h	/^class Stat {$/;"	c
Stat	stats.py	/^class Stat:$/;"	c
StatSheet	stats.py	/^class StatSheet:$/;"	c
Stats	actor.py	/^  def Stats(self):$/;"	m	class:Entity
SurfaceRegistry	graphics.py	/^class SurfaceRegistry:$/;"	c
TEST	vec_test.cpp	27;"	d	file:
TILE_SIZE	graphics.py	/^TILE_SIZE = 20$/;"	v
TP_NEEDED	turn.py	/^TP_NEEDED = 1000$/;"	v
TileGrid	main.py	/^class TileGrid:$/;"	c
TileGridFromString	main.py	/^def TileGridFromString(tile_types, string_map):$/;"	f
TileType	main.py	/^class TileType:$/;"	c
TiledPos	graphics.py	/^def TiledPos(pos):$/;"	f
Turn	turn.py	/^class Turn:$/;"	c
UnregisterSurface	graphics.py	/^  def UnregisterSurface(self, id):$/;"	m	class:SurfaceRegistry
UpdateClock	main.py	/^  def UpdateClock(self):$/;"	m	class:Game
UpdatePairs	actor.py	/^  def UpdatePairs(self, key_datas):$/;"	m	class:Entity
ValidTiles	main.py	/^def ValidTiles(tile_grid, entities):$/;"	f
Vec	vec.h	/^  constexpr Vec() { std::fill_n(data, N, T()); }$/;"	f	class:Vec
Vec	vec.h	/^  constexpr Vec(U...u) {$/;"	f	class:Vec
Vec	vec.h	/^class Vec {$/;"	c
Vec2d	vec.py	/^class Vec2d:$/;"	c
WHITE	graphics.py	/^WHITE = [255,255,255]$/;"	v
WINDOW_SIZE	main.py	/^WINDOW_SIZE = (1000, 1000)$/;"	v
Walkable	main.py	/^  def Walkable(self, pos):$/;"	m	class:Game
_DropItems	main.py	/^  def _DropItems(self, entity):$/;"	m	class:Game
_Node	priority_queue.py	/^class _Node:$/;"	c
_Weight	priority_queue.py	/^def _Weight(node):$/;"	f
__add__	vec.py	/^  def __add__(self, v):$/;"	m	class:Vec2d	file:
__contains__	actor.py	/^  def __contains__(self, key): return self.components.__contains__(key)$/;"	m	class:Entity	file:
__delattr__	actor.py	/^  def __delattr__(self, key): del self.components[key]$/;"	m	class:Entity	file:
__getattr__	actor.py	/^  def __getattr__(self, key): return self.Get(key)$/;"	m	class:Entity	file:
__getitem__	graphics.py	/^  def __getitem__(self, idx):$/;"	m	class:SurfaceRegistry	file:
__getitem__	vec.py	/^  def __getitem__(self, i):$/;"	m	class:Vec2d	file:
__init__	actor.py	/^  def __init__(self, id):$/;"	m	class:Entity
__init__	actor.py	/^  def __init__(self, pos, surface):$/;"	m	class:Marker
__init__	damage.py	/^  def __init__(self, amount, resistence=None):$/;"	m	class:Damage
__init__	damage.py	/^  def __init__(self, damages, resistences = None):$/;"	m	class:DamageVector
__init__	graphics.py	/^  def __init__(self):$/;"	m	class:SurfaceRegistry
__init__	graphics.py	/^  def __init__(self, pos, surface_id, rgb_add=None):$/;"	m	class:RenderTask
__init__	graphics.py	/^  def __init__(self, surface_reg, destination, bounds):$/;"	m	class:Frame
__init__	main.py	/^  def __init__(self):$/;"	m	class:Game
__init__	main.py	/^  def __init__(self):$/;"	m	class:TileGrid
__init__	main.py	/^  def __init__(self, damage_vector, target, move_action=None):$/;"	m	class:MeleAction
__init__	main.py	/^  def __init__(self, item, move_action=None):$/;"	m	class:GetAction
__init__	main.py	/^  def __init__(self, to_pos): self.to_pos = to_pos$/;"	m	class:MoveAction
__init__	main.py	/^  def __init__(self, walkable, surface_handle, desc):$/;"	m	class:TileType
__init__	priority_queue.py	/^  def __init__(self):$/;"	m	class:PriorityQueue
__init__	priority_queue.py	/^  def __init__(self, value, weight):$/;"	m	class:_Node
__init__	stats.py	/^  def __init__(self):$/;"	m	class:StatSheet
__init__	stats.py	/^  def __init__(self, name, numerator, denominator, reason=None):$/;"	m	class:FractionStat
__init__	stats.py	/^  def __init__(self, name, reason):$/;"	m	class:Stat
__init__	stats.py	/^  def __init__(self, name, value=0, multiplier=1, reason=None):$/;"	m	class:IntegerStat
__init__	turn.py	/^  def __init__(self):$/;"	m	class:Turn
__init__	vec.py	/^  def __init__(self, x, y):$/;"	m	class:Vec2d
__iter__	actor.py	/^  def __iter__(self): return self.components.__iter__()$/;"	m	class:Entity	file:
__len__	priority_queue.py	/^  def __len__(self): return self.queue.__len__()$/;"	m	class:PriorityQueue	file:
__mul__	vec.py	/^  def __mul__(self, x):$/;"	m	class:Vec2d	file:
__neg__	vec.py	/^  def __neg__(self):$/;"	m	class:Vec2d	file:
__repr__	actor.py	/^  def __repr__(self):$/;"	m	class:Entity	file:
__repr__	stats.py	/^  def __repr__(self):$/;"	m	class:Stat	file:
__repr__	stats.py	/^  def __repr__(self):$/;"	m	class:StatSheet	file:
__setattr__	actor.py	/^  def __setattr__(self, key, data): self.Set(key, data)$/;"	m	class:Entity	file:
__sub__	vec.py	/^  def __sub__(self, v):$/;"	m	class:Vec2d	file:
__truediv__	vec.py	/^  def __truediv__(self, x):$/;"	m	class:Vec2d	file:
b	vec.h	/^  T& b() { static_assert(N > 2); return data[2]; }$/;"	f	class:Vec
b	vec.h	/^  const T& b() const { static_assert(N > 2); return data[2]; }$/;"	f	class:Vec
begin	vec.h	/^  constexpr T* begin() { return data; }$/;"	f	class:Vec
begin	vec.h	/^  constexpr const T* begin() const { return data; }$/;"	f	class:Vec
bimap_vec	vec.h	/^constexpr Vec<X, N> bimap_vec(F f, Vec<T, N> a, Vec<U, N> b) {$/;"	f
data	vec.h	/^  T data[N];$/;"	m	class:Vec
desc	main.py	/^  def desc(self): return self.desc_$/;"	m	class:TileType
end	vec.h	/^  constexpr T* end() { return data + N; }$/;"	f	class:Vec
end	vec.h	/^  constexpr const T* end() const { return data + N; }$/;"	f	class:Vec
g	vec.h	/^  T& g() { static_assert(N > 1); return data[1]; }$/;"	f	class:Vec
g	vec.h	/^  const T& g() const { static_assert(N > 1); return data[1]; }$/;"	f	class:Vec
instance_properties	actor.py	/^  instance_properties = {'id', 'components', 'children', 'parent'}$/;"	v	class:Entity
item_compendium	item_compendium.py	/^item_compendium = [$/;"	v
magnitude	vec.h	/^constexpr T magnitude(Vec<T, N> a) {$/;"	f
magnitude_squared	vec.h	/^constexpr T magnitude_squared(Vec<T, N> a) {$/;"	f
main	main.py	/^def main():$/;"	f
main	vec_test.cpp	/^int main() {$/;"	f
map_vec_x	vec.h	/^constexpr Vec<T, N> map_vec_x(F f, U u, Vec<T, N> v) {$/;"	f
name	stats.h	/^  const std::string& name() const { return name_; }$/;"	f	class:Stat
name_	stats.h	/^  std::string name_;$/;"	m	class:Stat
operator !=	vec.h	/^constexpr bool operator!=(Vec<T, N> a, Vec<U, N> b) {$/;"	f
operator *	vec.h	/^constexpr Vec<X, N> operator*(T a, Vec<U, N> b) {$/;"	f
operator *	vec.h	/^constexpr Vec<X, N> operator*(Vec<T, N> a, U b) {$/;"	f
operator +	vec.h	/^constexpr Vec<X, N> operator+(Vec<T, N> a, Vec<U, N> b) {$/;"	f
operator -	vec.h	/^constexpr Vec<X, N> operator-(Vec<T, N> a, Vec<U, N> b) {$/;"	f
operator /	vec.h	/^constexpr Vec<X, N> operator\/(T a, Vec<U, N> b) {$/;"	f
operator /	vec.h	/^constexpr Vec<X, N> operator\/(Vec<T, N> a, U b) {$/;"	f
operator <<	vec_test.cpp	/^std::ostream& operator<<(std::ostream& os, Vec<T, N> v) {$/;"	f
operator ==	vec.h	/^constexpr bool operator==(Vec<T, N> a, Vec<U, N> b) {$/;"	f
operator []	vec.h	/^  T& operator[](const size_t i) { return data[i]; }$/;"	f	class:Vec
operator []	vec.h	/^  const T& operator[](const size_t i) const { return data[i]; }$/;"	f	class:Vec
r	vec.h	/^  T& r() { static_assert(N > 0); return data[0]; }$/;"	f	class:Vec
r	vec.h	/^  const T& r() const { static_assert(N > 0); return data[0]; }$/;"	f	class:Vec
reason	stats.h	/^  const std::string& reason() const { return reason_; }$/;"	f	class:Stat
reason_	stats.h	/^  std::string reason_;$/;"	m	class:Stat
repr	stats.h	/^  std::string repr() const {$/;"	f	class:Stat
surface_handle	main.py	/^  def surface_handle(self): return self.surface_handle_$/;"	m	class:TileType
test	vec_test.cpp	/^void test(const char* const op_desc, T result, T expected) {$/;"	f
valid_components	actor.py	/^  valid_components = {'stat_sheet', 'pos',$/;"	v	class:Entity
values	priority_queue.py	/^  def values(self): return [n.value for n in self.queue]$/;"	m	class:PriorityQueue
walkable	main.py	/^  def walkable(self): return self.walkable_$/;"	m	class:TileType
x	vec.h	/^  T& x() { static_assert(N > 0); return data[0]; }$/;"	f	class:Vec
x	vec.h	/^  const T& x() const { static_assert(N > 0); return data[0]; }$/;"	f	class:Vec
y	vec.h	/^  T& y() { static_assert(N > 1); return data[1]; }$/;"	f	class:Vec
y	vec.h	/^  const T& y() const { static_assert(N > 1); return data[1]; }$/;"	f	class:Vec
z	vec.h	/^  T& z() { static_assert(N > 2); return data[2]; }$/;"	f	class:Vec
z	vec.h	/^  const T& z() const { static_assert(N > 2); return data[2]; }$/;"	f	class:Vec
